using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    static class Program
    {
        public static string path = @"D:\dream11\masterplayers.xlsx";
        public static string connStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + path + ";Extended Properties=Excel 12.0;";
        public static List<Player> initialPlayerList = new List<Player>();
        public static string TeamA = "MUM";
        public static string TeamB = "PNJ";
        public static int minTeam = 4;
        public static int minWK = 1;
        public static int minBAT = 3;
        public static int minAR = 1;
        public static int minBOWL = 3;
        public static double maxCredits = 100.00;
        public static int totalPlayer = 11;
        public static List<Team> finalTeams = new List<Team>();
        public static string requiredPlayers = "akrjqgdo";
        public static int id = 1;
        public static DataTable table = new DataTable();
        static void Main(string[] args)
        {
            ConvertDtToObject(ReadDataFromExcel());
            createDataTable();
            var strChars = "";
            foreach(var p in initialPlayerList)
            {
                strChars += p.Id;
            }

            IList<Char> chars = strChars.ToList();
            List<string> allCombinations = new List<String>();
            //for (int i = 1; i <= chars.Count; i++)
            //{
                var combis = new Facet.Combinatorics.Combinations<Char>(
                    chars, totalPlayer, Facet.Combinatorics.GenerateOption.WithoutRepetition);
                allCombinations.AddRange(combis.Select(c => string.Join("", c)));
            //}
            long j = 1;
            foreach (var combi in allCombinations)
            {
                Console.WriteLine(j.ToString());
                var t = initialPlayerList.Where(s => combi.ToCharArray().Contains(s.Id)).ToList();
                var proTeam = ValidateTeam(t);
                if(proTeam.TeamPlayers!= null)
                {
                    finalTeams.Add(proTeam);
                    Console.WriteLine(j.ToString() + "-" + combi.Length + " --- " + combi);
                }
                j++;
            }
            table.ToCSV(@"D:\dream11\autogeneratedteams.csv");
            Console.ReadLine();

        }

        private static Team ValidateTeam(IList<Player> players)
        {
            var T = new Team();
            if(players.Count == totalPlayer)
            {
                var sumOfCredits = players.Sum(o => o.Credits);
                if (sumOfCredits <= maxCredits)
                {
                    var TeamACount = players.Where(i => i.Team.Equals(TeamA)).Count();
                    var TeamBCount = players.Where(i => i.Team.Equals(TeamB)).Count();
                    if (TeamACount >= minTeam && TeamBCount>=minTeam)
                    {
                        var wkCount = players.Where(i => i.Role.Equals("WK")).Count();
                        if (wkCount == minWK)
                        {
                            var batCount = players.Where(i => i.Role.Equals("BAT")).Count();
                            if (batCount >= minBAT)
                            {
                                var arCount = players.Where(i => i.Role.Equals("AR")).Count();
                                if (arCount >= minAR)
                                {
                                    var bowlCount = players.Where(i => i.Role.Equals("BOWL")).Count();
                                    if (bowlCount >= minBOWL)
                                    {
                                        var reqPlayers = players.Where(i => requiredPlayers.ToCharArray().Contains(i.Id)).Count();
                                        
                                            if (requiredPlayers.Length == reqPlayers)
                                            {
                                                T.TeamPlayers = players;
                                                T.TeamACount = TeamACount;
                                                T.TeamBCount = TeamBCount;
                                                T.TotalCredits = sumOfCredits;
                                            DataRow dr = table.NewRow();
                                            dr[0] = id;
                                            id = id + 1;
                                            dr[1] = sumOfCredits.ToString();
                                            dr[2] = TeamA + "-" + TeamACount + ":" + TeamB + "-" + TeamBCount;
                                            var i = 3;
                                            foreach(var p in players)
                                            {
                                                dr[i] = p.PlaeryName + "-" + p.Team + "-" + p.Role;
                                                i = i + 1;
                                            }
                                            table.Rows.Add(dr);

                                            }
                                        
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return T;
        }

        private static DataTable ReadDataFromExcel()
        {
            System.Data.OleDb.OleDbConnection MyConnection;
            System.Data.DataSet DtSet;
            System.Data.OleDb.OleDbDataAdapter MyCommand;
            MyConnection = new System.Data.OleDb.OleDbConnection(connStr);
            MyCommand = new System.Data.OleDb.OleDbDataAdapter("select * from [Players$]", MyConnection);
            MyCommand.TableMappings.Add("Table", "TestTable");
            DtSet = new System.Data.DataSet();
            MyCommand.Fill(DtSet);            
            MyConnection.Close();
            return DtSet.Tables[0];
        }

        private static void ConvertDtToObject(DataTable dt)
        {

            foreach(DataRow dr in dt.Rows)
            {

                initialPlayerList.Add(new Player
                {
                    Id = Convert.ToChar(dr["Id"]),
                    PlaeryName = Convert.ToString(dr["Player"]).Trim(),
                    Team = Convert.ToString(dr["Team"]).Trim(),
                    Role = Convert.ToString(dr["Role"]).Trim(),
                    Points = Convert.ToDouble(dr["Points"]),
                    Credits = Convert.ToDouble(dr["Credits"])
                });
            }
        }

        public static void ToCSV(this DataTable dtDataTable, string strFilePath)
        {
            StreamWriter sw = new StreamWriter(strFilePath, false);
            //headers  
            for (int i = 0; i < dtDataTable.Columns.Count; i++)
            {
                sw.Write(dtDataTable.Columns[i]);
                if (i < dtDataTable.Columns.Count - 1)
                {
                    sw.Write(",");
                }
            }
            sw.Write(sw.NewLine);
            foreach (DataRow dr in dtDataTable.Rows)
            {
                for (int i = 0; i < dtDataTable.Columns.Count; i++)
                {
                    if (!Convert.IsDBNull(dr[i]))
                    {
                        string value = dr[i].ToString();
                        if (value.Contains(','))
                        {
                            value = String.Format("\"{0}\"", value);
                            sw.Write(value);
                        }
                        else
                        {
                            sw.Write(dr[i].ToString());
                        }
                    }
                    if (i < dtDataTable.Columns.Count - 1)
                    {
                        sw.Write(",");
                    }
                }
                sw.Write(sw.NewLine);
            }
            sw.Close();
        }

        public static DataTable createDataTable()
        {
            
            //columns  
            table.Columns.Add("S.No", typeof(int));
            table.Columns.Add("Credits", typeof(string));
            table.Columns.Add("Team-Sep", typeof(string));
            table.Columns.Add("Player1", typeof(string));
            table.Columns.Add("Player2", typeof(string));
            table.Columns.Add("Player3", typeof(string));
            table.Columns.Add("Player4", typeof(string));
            table.Columns.Add("Player5", typeof(string));
            table.Columns.Add("Player6", typeof(string));
            table.Columns.Add("Player7", typeof(string));
            table.Columns.Add("Player8", typeof(string));
            table.Columns.Add("Player9", typeof(string));
            table.Columns.Add("Player10", typeof(string));
            table.Columns.Add("Player11", typeof(string));


            return table;
        }
    }
}
